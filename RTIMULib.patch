diff -druN RTIMULib.orig/Linux/RTIMULibDrive/RTIMULibDrive.cpp RTIMULib/Linux/RTIMULibDrive/RTIMULibDrive.cpp
--- RTIMULib.orig/Linux/RTIMULibDrive/RTIMULibDrive.cpp 2015-02-01 10:15:04.000000000 +0100
+++ RTIMULib/Linux/RTIMULibDrive/RTIMULibDrive.cpp      2015-02-01 10:13:26.000000000 +0100
@@ -23,6 +23,10 @@


 #include "RTIMULib.h"
+#include <stdio.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>

 int main()
 {
@@ -32,6 +36,17 @@
     uint64_t displayTimer;
     uint64_t now;

+    int sockfd;
+    struct sockaddr_in servaddr;
+    char mesg[1000];
+
+    sockfd=socket(AF_INET,SOCK_DGRAM,0);
+
+    bzero(&servaddr,sizeof(servaddr));
+    servaddr.sin_family = AF_INET;
+    servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");
+    servaddr.sin_port=htons(32000);
+
     //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
     //  Or, you can create the .ini in some other directory by using:
     //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
@@ -72,8 +87,12 @@
             //  display 10 times per second

             if ((now - displayTimer) > 100000) {
-                printf("Sample rate %d: %s\r", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));
-                fflush(stdout);
+//                printf("Sample rate %d: %s\r", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));
+                sprintf(mesg,"%lld %s", now/1000, RTMath::displayDegrees("IMU", imuData.fusionPose));
+                sendto(sockfd,mesg,strlen(mesg),0,
+                    (struct sockaddr *)&servaddr,sizeof(servaddr));
+
+               fflush(stdout);
                 displayTimer = now;
             }

@@ -86,5 +105,6 @@
             }
         }
     }
+    close(sockfd);
 }

diff -druN RTIMULib.orig/RTIMULib/RTMath.cpp RTIMULib/RTIMULib/RTMath.cpp
--- RTIMULib.orig/RTIMULib/RTMath.cpp   2015-02-01 10:15:04.000000000 +0100
+++ RTIMULib/RTIMULib/RTMath.cpp        2015-02-01 10:14:10.000000000 +0100
@@ -2,7 +2,7 @@
 //
 //  This file is part of RTIMULib
 //
-//  Copyright (c) 2014-2015, richards-tech
+//  Copyright (c) 2014, richards-tech
 //
 //  Permission is hereby granted, free of charge, to any person obtaining a copy of
 //  this software and associated documentation files (the "Software"), to deal in
@@ -51,7 +51,7 @@

 const char *RTMath::displayDegrees(const char *label, RTVector3& vec)
 {
-    sprintf(m_string, "%s: roll:%f, pitch:%f, yaw:%f", label, vec.x() * RTMATH_RAD_TO_DEGREE,
+    sprintf(m_string, "%f %f %f", vec.x() * RTMATH_RAD_TO_DEGREE,
             vec.y() * RTMATH_RAD_TO_DEGREE, vec.z() * RTMATH_RAD_TO_DEGREE);
     return m_string;
 }

